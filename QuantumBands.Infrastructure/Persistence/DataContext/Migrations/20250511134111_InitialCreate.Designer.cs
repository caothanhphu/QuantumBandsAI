// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuantumBands.Infrastructure.Persistence.DataContext;

#nullable disable

namespace QuantumBands.Infrastructure.Persistence.DataContext.Migrations
{
    [DbContext(typeof(FinixAIDbContext))]
    [Migration("20250511134111_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuantumBands.Domain.Entities.EaclosedTrade", b =>
                {
                    b.Property<long>("ClosedTradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ClosedTradeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ClosedTradeId"));

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Commission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("EaticketId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EATicketID");

                    b.Property<bool>("IsProcessedForDailyPandL")
                        .HasColumnType("bit")
                        .HasColumnName("IsProcessedForDailyPAndL");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RealizedPandL")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RealizedPAndL");

                    b.Property<DateTime>("RecordedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal?>("Swap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TradeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TradingAccountId")
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    b.Property<decimal>("VolumeLots")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("ClosedTradeId")
                        .HasName("PK__EAClosed__9C45B584F04B6DEB");

                    b.HasIndex(new[] { "TradingAccountId", "EaticketId" }, "UQ_EAClosedTrades_Account_Ticket")
                        .IsUnique();

                    b.ToTable("EAClosedTrades");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.EaopenPosition", b =>
                {
                    b.Property<long>("OpenPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("OpenPositionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OpenPositionId"));

                    b.Property<decimal?>("Commission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<decimal>("CurrentMarketPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("EaticketId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EATicketID");

                    b.Property<decimal>("FloatingPandL")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FloatingPAndL");

                    b.Property<DateTime>("LastUpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Swap")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0.00m);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TradeType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TradingAccountId")
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    b.Property<decimal>("VolumeLots")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OpenPositionId")
                        .HasName("PK__EAOpenPo__A2749288012FED3A");

                    b.HasIndex(new[] { "TradingAccountId", "EaticketId" }, "UQ_EAOpenPositions_Account_Ticket")
                        .IsUnique();

                    b.ToTable("EAOpenPositions");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.InitialShareOffering", b =>
                {
                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OfferingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferingId"));

                    b.Property<int>("AdminUserId")
                        .HasColumnType("int")
                        .HasColumnName("AdminUserID");

                    b.Property<decimal?>("CeilingPricePerShare")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal?>("FloorPricePerShare")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime?>("OfferingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OfferingPricePerShare")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("OfferingStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<long>("SharesOffered")
                        .HasColumnType("bigint");

                    b.Property<long>("SharesSold")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<int>("TradingAccountId")
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("OfferingId")
                        .HasName("PK__InitialS__3500D7CD2B65639F");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("TradingAccountId");

                    b.ToTable("InitialShareOfferings");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.ShareOrderSide", b =>
                {
                    b.Property<int>("OrderSideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderSideID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderSideId"));

                    b.Property<string>("SideName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("OrderSideId")
                        .HasName("PK__ShareOrd__903F74128F1A11B1");

                    b.HasIndex(new[] { "SideName" }, "UQ__ShareOrd__8D8D27303DD8CB84")
                        .IsUnique();

                    b.ToTable("ShareOrderSides");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.ShareOrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OrderStatusId")
                        .HasName("PK__ShareOrd__BC674F41CC21CCBD");

                    b.HasIndex(new[] { "StatusName" }, "UQ__ShareOrd__05E7698A1417F64A")
                        .IsUnique();

                    b.ToTable("ShareOrderStatuses");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.ShareOrderType", b =>
                {
                    b.Property<int>("OrderTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderTypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OrderTypeId")
                        .HasName("PK__ShareOrd__23AC264C907B9CD8");

                    b.HasIndex(new[] { "TypeName" }, "UQ__ShareOrd__D4E7DFA8F376B605")
                        .IsUnique();

                    b.ToTable("ShareOrderTypes");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.SharePortfolio", b =>
                {
                    b.Property<int>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PortfolioID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortfolioId"));

                    b.Property<decimal>("AverageBuyPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<int>("TradingAccountId")
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PortfolioId")
                        .HasName("PK__SharePor__6D3A139D5175265C");

                    b.HasIndex("TradingAccountId");

                    b.HasIndex(new[] { "UserId", "TradingAccountId" }, "UQ_SharePortfolios_User_TradingAccount")
                        .IsUnique();

                    b.ToTable("SharePortfolios");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsEditableByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("SettingDataType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("String");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("UpdatedByUserID");

                    b.HasKey("SettingId")
                        .HasName("PK__SystemSe__54372AFDA4FA27A3");

                    b.HasIndex("UpdatedByUserId");

                    b.HasIndex(new[] { "SettingKey" }, "UQ__SystemSe__01E719ADD25DB536")
                        .IsUnique();

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TradingAccount", b =>
                {
                    b.Property<int>("TradingAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradingAccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BrokerPlatformIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("CreatedByUserID");

                    b.Property<decimal>("CurrentNetAssetValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("CurrentSharePrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(38, 22)")
                        .HasComputedColumnSql("(case when [TotalSharesIssued]>(0) then [CurrentNetAssetValue]/[TotalSharesIssued] else (0) end)", true);

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Eaname")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("Quantum Bands AI")
                        .HasColumnName("EAName");

                    b.Property<decimal>("InitialCapital")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("ManagementFeeRate")
                        .HasColumnType("decimal(5, 4)");

                    b.Property<long>("TotalSharesIssued")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("TradingAccountId")
                        .HasName("PK__TradingA__83BE6AADE220CC83");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex(new[] { "AccountName" }, "UQ__TradingA__406E0D2EB419829E")
                        .IsUnique();

                    b.ToTable("TradingAccounts");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TradingAccountSnapshot", b =>
                {
                    b.Property<long>("SnapshotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("SnapshotID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SnapshotId"));

                    b.Property<decimal>("ClosingNav")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ClosingNAV");

                    b.Property<decimal>("ClosingSharePrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("ManagementFeeDeducted")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("OpeningNav")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("OpeningNAV");

                    b.Property<decimal>("ProfitDistributed")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("RealizedPandLforTheDay")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RealizedPAndLForTheDay");

                    b.Property<DateOnly>("SnapshotDate")
                        .HasColumnType("date");

                    b.Property<int>("TradingAccountId")
                        .HasColumnType("int")
                        .HasColumnName("TradingAccountID");

                    b.Property<decimal>("UnrealizedPandLforTheDay")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UnrealizedPAndLForTheDay");

                    b.HasKey("SnapshotId")
                        .HasName("PK__TradingA__664F570B04BADEE1");

                    b.HasIndex(new[] { "TradingAccountId", "SnapshotDate" }, "UQ_TradingAccountSnapshots_Account_Date")
                        .IsUnique();

                    b.ToTable("TradingAccountSnapshots");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TransactionTypeId")
                        .HasName("PK__Transact__20266CEB66053C83");

                    b.HasIndex(new[] { "TypeName" }, "UQ__Transact__D4E7DFA81202EEAE")
                        .IsUnique();

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC4CD84DCB");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E46C1E47F9")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534121601FF")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__UserRole__8AFACE3AA7A0796F");

                    b.HasIndex(new[] { "RoleName" }, "UQ__UserRole__8A2B6160E9226D17")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValue("USD");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WalletId")
                        .HasName("PK__Wallets__84D4F92EA98FAE17");

                    b.HasIndex(new[] { "UserId" }, "UQ__Wallets__1788CCAD0AF96292")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.WalletTransaction", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ReferenceID");

                    b.Property<long?>("RelatedTransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("RelatedTransactionID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Completed");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionTypeID");

                    b.Property<int>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    b.HasKey("TransactionId")
                        .HasName("PK__WalletTr__55433A4BB64337D4");

                    b.HasIndex("RelatedTransactionId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.EaclosedTrade", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.TradingAccount", "TradingAccount")
                        .WithMany("EaclosedTrades")
                        .HasForeignKey("TradingAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_EAClosedTrades_TradingAccountID");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.EaopenPosition", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.TradingAccount", "TradingAccount")
                        .WithMany("EaopenPositions")
                        .HasForeignKey("TradingAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_EAOpenPositions_TradingAccountID");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.InitialShareOffering", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.User", "AdminUser")
                        .WithMany("InitialShareOfferings")
                        .HasForeignKey("AdminUserId")
                        .IsRequired()
                        .HasConstraintName("FK_InitialShareOfferings_AdminUserID");

                    b.HasOne("QuantumBands.Domain.Entities.TradingAccount", "TradingAccount")
                        .WithMany("InitialShareOfferings")
                        .HasForeignKey("TradingAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_InitialShareOfferings_TradingAccountID");

                    b.Navigation("AdminUser");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.SharePortfolio", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.TradingAccount", "TradingAccount")
                        .WithMany("SharePortfolios")
                        .HasForeignKey("TradingAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_SharePortfolios_TradingAccountID");

                    b.HasOne("QuantumBands.Domain.Entities.User", "User")
                        .WithMany("SharePortfolios")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SharePortfolios_UserID");

                    b.Navigation("TradingAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.SystemSetting", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.User", "UpdatedByUser")
                        .WithMany("SystemSettings")
                        .HasForeignKey("UpdatedByUserId")
                        .HasConstraintName("FK_SystemSettings_UpdatedByUserID");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TradingAccount", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.User", "CreatedByUser")
                        .WithMany("TradingAccounts")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_TradingAccounts_CreatedByUserID");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TradingAccountSnapshot", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.TradingAccount", "TradingAccount")
                        .WithMany("TradingAccountSnapshots")
                        .HasForeignKey("TradingAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TradingAccountSnapshots_TradingAccountID");

                    b.Navigation("TradingAccount");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.User", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("QuantumBands.Domain.Entities.Wallet", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Wallets_UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.WalletTransaction", b =>
                {
                    b.HasOne("QuantumBands.Domain.Entities.WalletTransaction", "RelatedTransaction")
                        .WithMany("InverseRelatedTransaction")
                        .HasForeignKey("RelatedTransactionId")
                        .HasConstraintName("FK_WalletTransactions_RelatedTransactionID");

                    b.HasOne("QuantumBands.Domain.Entities.TransactionType", "TransactionType")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransactions_TransactionTypeID");

                    b.HasOne("QuantumBands.Domain.Entities.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("FK_WalletTransactions_WalletID");

                    b.Navigation("RelatedTransaction");

                    b.Navigation("TransactionType");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TradingAccount", b =>
                {
                    b.Navigation("EaclosedTrades");

                    b.Navigation("EaopenPositions");

                    b.Navigation("InitialShareOfferings");

                    b.Navigation("SharePortfolios");

                    b.Navigation("TradingAccountSnapshots");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.TransactionType", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.User", b =>
                {
                    b.Navigation("InitialShareOfferings");

                    b.Navigation("SharePortfolios");

                    b.Navigation("SystemSettings");

                    b.Navigation("TradingAccounts");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("QuantumBands.Domain.Entities.WalletTransaction", b =>
                {
                    b.Navigation("InverseRelatedTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
